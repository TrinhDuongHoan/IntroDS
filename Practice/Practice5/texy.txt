{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Bài 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Animal:\n",
    "    def __init__(self,picture,food,hunger,boundaries,location):\n",
    "        self.picture = picture\n",
    "        self.food = food\n",
    "        self.hunger = hunger\n",
    "        self.boundaries = boundaries\n",
    "        self.location = location\n",
    "    def makeNoise(self):\n",
    "        pass\n",
    "    def eat(self):\n",
    "        pass\n",
    "    def sleep(self):\n",
    "        print('zzz')\n",
    "    def roam(self):\n",
    "        pass\n",
    "class Feline(Animal):\n",
    "    def roam(self):\n",
    "        print('.. ..')\n",
    "class Canine(Animal):\n",
    "    def roam(self):\n",
    "        print('boop boop')\n",
    "class Hippo(Animal):\n",
    "    def makeNoise(self):\n",
    "        print('hoops hoops')\n",
    "    def eat(self):\n",
    "        print('glasses')\n",
    "class Lion(Feline):\n",
    "    def makeNoise(self):\n",
    "        print('groam')\n",
    "    def eat(self):\n",
    "        print('thịt rừng')\n",
    "class Cat(Feline):\n",
    "    def makeNoise(self):\n",
    "        print('meow meow')\n",
    "    def eat(self):\n",
    "        print('meow foods')\n",
    "class Tiger(Feline):\n",
    "    def makeNoise(self):\n",
    "        print('gừ gừ')\n",
    "    def eat(self):\n",
    "        print('thịt thỏ')\n",
    "class Dog(Canine):\n",
    "    def makeNoise(self):\n",
    "        print('gâu gâu ẳng ẳng')\n",
    "    def eat(self):\n",
    "        print('thức ăn cho chóa')\n",
    "    def chaseCats(self):\n",
    "        print('giỡn với mèo')\n",
    "class Wolf(Canine):\n",
    "    def makeNoise(self):\n",
    "        print('woo woo')\n",
    "    def eat(self):\n",
    "        print('thịt và rau')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sư tử simba : \n",
      "groam\n",
      "thịt rừng\n",
      "zzz\n",
      ".. ..\n",
      "mèo kitty : \n",
      "meow meow\n",
      "meow foods\n",
      "zzz\n",
      ".. ..\n",
      "hổ rajah: \n",
      "gừ gừ\n",
      "thịt thỏ\n",
      "zzz\n",
      ".. ..\n",
      "hà mã gloria : \n",
      "hoops hoops\n",
      "glasses\n",
      "zzz\n",
      "chó buddy : \n",
      "gâu gâu ẳng ẳng\n",
      "thức ăn cho chóa\n",
      "zzz\n",
      "boop boop\n",
      "giỡn với mèo\n",
      "sói akela : \n",
      "woo woo\n",
      "thịt và rau\n",
      "zzz\n",
      "boop boop\n"
     ]
    }
   ],
   "source": [
    "# Khởi tạo một đối tượng Lion\n",
    "simba = Lion('lion.png', 'thịt', 5, 'Savannah', 'Africa')\n",
    "print('sư tử simba : ')\n",
    "simba.makeNoise() \n",
    "simba.eat()      \n",
    "simba.sleep()     \n",
    "simba.roam()       \n",
    "\n",
    "# Khởi tạo một đối tượng Cat\n",
    "kitty = Cat('cat.png', 'cá', 3, 'Nhà', 'Phòng khách')\n",
    "print('mèo kitty : ')\n",
    "kitty.makeNoise()\n",
    "kitty.eat()       \n",
    "kitty.sleep()      \n",
    "kitty.roam()    \n",
    "\n",
    "# Khởi tạo một đối tượng Tiger\n",
    "rajah = Tiger('tiger.png', 'thịt lớn', 4, 'Rừng', 'Ấn Độ')\n",
    "print('hổ rajah: ')\n",
    "rajah.makeNoise()\n",
    "rajah.eat()    \n",
    "rajah.sleep() \n",
    "rajah.roam()    \n",
    "\n",
    "# Khởi tạo một đối tượng Hippo\n",
    "gloria = Hippo('hippo.png', 'cỏ', 5, 'Sông', 'Châu Phi')\n",
    "print('hà mã gloria : ')\n",
    "gloria.makeNoise()\n",
    "gloria.eat()      \n",
    "gloria.sleep()     \n",
    "gloria.roam()      \n",
    "\n",
    "# Khởi tạo một đối tượng Dog\n",
    "buddy = Dog('dog.png', 'xương', 2, 'Sân sau', 'Nhà')\n",
    "print('chó buddy : ')\n",
    "buddy.makeNoise()  \n",
    "buddy.eat()        \n",
    "buddy.sleep()     \n",
    "buddy.roam()       \n",
    "buddy.chaseCats()  \n",
    "\n",
    "# Khởi tạo một đối tượng Wolf\n",
    "akela = Wolf('wolf.png', 'thịt đỏ', 4, 'Rừng', 'Bắc Mỹ')\n",
    "print('sói akela : ')\n",
    "akela.makeNoise()  \n",
    "akela.eat()        \n",
    "akela.sleep()     \n",
    "akela.roam()       "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Bài 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Person:\n",
    "    def __init__(self,name : str,birthday : str):\n",
    "        self.name = name\n",
    "        self.birthday = birthday\n",
    "    def getName(self):\n",
    "        return self.name\n",
    "    def __str__(self):\n",
    "        return f'tên : {self.name}, ngày sinh : {self.birthday}'\n",
    "\n",
    "class Employee(Person):\n",
    "    def __init__(self,name : str,birthday : str,salary : float):\n",
    "        super().__init__(name,birthday)\n",
    "        self.salary = salary\n",
    "    def getSalary(self):\n",
    "        return self.salary\n",
    "    def __str__(self):\n",
    "        return super().__str__() + f'\\ntiền lương:{self.salary} '\n",
    "\n",
    "class Manager(Employee):\n",
    "    def __init__(self,name : str,birthday : str,salary : float,assistant : Employee):\n",
    "        super().__init__(name,birthday,salary)\n",
    "        self.assistant = assistant\n",
    "    def setAssistant(self,assistant : Employee):\n",
    "        self.assistant = assistant\n",
    "    def __str__(self):\n",
    "        return super().__str__() + f'\\nassistant : {self.assistant}'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "người thứ 1\n",
      "tên : Ha ha ha, ngày sinh : 12/3/2004\n",
      "\n",
      "người thứ 2\n",
      "tên : heheheh, ngày sinh : 13/04/2005 TCN\n",
      "tiền lương:150000000000 \n",
      "\n",
      "người thứ 3\n",
      "tên : Ban, ngày sinh : 14/5/2006 TCN\n",
      "tiền lương:1099511627776 \n",
      "assistant : tên : heheheh, ngày sinh : 13/04/2005 TCN\n",
      "tiền lương:150000000000 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "class PeopleTest:\n",
    "    def test(self):\n",
    "        x = [Person('Ha ha ha','12/3/2004'),\n",
    "             Employee('heheheh','13/04/2005 TCN',15*10**10),\n",
    "             Manager('Ban','14/5/2006 TCN',16**10,Employee('heheheh','13/04/2005 TCN',15*10**10))\n",
    "            ]\n",
    "        idx = 1\n",
    "        for i in x:\n",
    "            print(f'người thứ {idx}')\n",
    "            idx+=1\n",
    "            print(f'{str(i)}')\n",
    "            print()\n",
    "PeopleTest().test()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3 + 4)\n",
      "7\n",
      "((3 + 4))^2\n",
      "49\n"
     ]
    }
   ],
   "source": [
    "class Expression:\n",
    "    def __str__(self):\n",
    "        pass\n",
    "\n",
    "    def evaluate(self):\n",
    "        pass\n",
    "\n",
    "class BinaryExpression(Expression):\n",
    "    def left(self):\n",
    "        pass\n",
    "\n",
    "    def right(self):\n",
    "        pass\n",
    "\n",
    "class Numeral(Expression):\n",
    "    def __init__(self, value):\n",
    "        self.value = value\n",
    "\n",
    "    def __str__(self):\n",
    "        return str(self.value)\n",
    "\n",
    "    def evaluate(self):\n",
    "        return self.value\n",
    "\n",
    "class Square(Expression):\n",
    "    def __init__(self, expression):\n",
    "        self.expression = expression\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"({str(self.expression)})^2\"\n",
    "\n",
    "    def evaluate(self):\n",
    "        return self.expression.evaluate() ** 2\n",
    "\n",
    "class Addition(BinaryExpression):\n",
    "    def __init__(self, left, right):\n",
    "        self.left = left\n",
    "        self.right = right\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"({str(self.left)} + {str(self.right)})\"\n",
    "\n",
    "    def evaluate(self):\n",
    "        return self.left.evaluate() + self.right.evaluate()\n",
    "\n",
    "num1 = Numeral(3)\n",
    "num2 = Numeral(4)\n",
    "sum_expression = Addition(num1, num2)\n",
    "square_expression = Square(sum_expression)\n",
    "\n",
    "print(str(sum_expression) )\n",
    "print(sum_expression.evaluate()) \n",
    "print(str(square_expression)) \n",
    "print(square_expression.evaluate())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### bài 4"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Câu a:\n",
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# b\n",
    "class Sinhvien:\n",
    "    def __init__(self, idsv, tensv, diachi, phone, program, course_limit):\n",
    "        self.idsv = idsv\n",
    "        self.tensv = tensv\n",
    "        self.diachi = diachi\n",
    "        self.phone = phone\n",
    "        self.program = program\n",
    "        self.course_limit = course_limit\n",
    "        self.dang_ky = []\n",
    "\n",
    "    def dang_ky_module(self, module):\n",
    "        if len(self.dang_ky) < self.course_limit:\n",
    "            self.dang_ky.append(module)\n",
    "            print(f\"{self.tensv} đã đăng ký module {module.Somodule}\")\n",
    "        else:\n",
    "            print(\"Đã đạt giới hạn số lượng khóa học.\")\n",
    "\n",
    "    def huy_dang_ky_module(self, module):\n",
    "        if module in self.dang_ky:\n",
    "            self.dang_ky.remove(module)\n",
    "            print(f\"{self.tensv} đã hủy đăng ký module {module.Somodule}\")\n",
    "        else:\n",
    "            print(\"Module không tồn tại trong danh sách đăng ký của sinh viên.\")\n",
    "\n",
    "\n",
    "class ModuleOffering:\n",
    "    def __init__(self, Somodule, semester, instructor, room_number, capacity, status):\n",
    "        self.Somodule = Somodule\n",
    "        self.semester = semester\n",
    "        self.instructor = instructor\n",
    "        self.room_number = room_number\n",
    "        self.capacity = capacity\n",
    "        self.status = status\n",
    "\n",
    "\n",
    "class Nhanvien:\n",
    "    def __init__(self, tennv, idnv, nhiemvu):\n",
    "        self.tennv = tennv\n",
    "        self.idnv = idnv\n",
    "        self.nhiemvu = nhiemvu\n",
    "\n",
    "    def thay_doi_status(self, module, new_status):\n",
    "        module.status = new_status\n",
    "        print(f\"Trạng thái của module {module.Somodule} đã được thay đổi thành {new_status}.\")\n",
    "\n",
    "\n",
    "class Khoahoc:\n",
    "    def __init__(self, tenkhoahoc, bomon):\n",
    "        self.tenkhoahoc = tenkhoahoc\n",
    "        self.bomon = bomon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Đoàn Ban đã đăng ký module 1\n",
      "Đoàn Ban đã đăng ký module 2\n",
      "Trạng thái của module 2 đã được thay đổi thành not full.\n",
      "Đoàn Ban đã hủy đăng ký module 1\n"
     ]
    }
   ],
   "source": [
    "# c\n",
    "# khởi tạo\n",
    "sv = Sinhvien(1, \"Đoàn Ban\", \"123 Đại học\", \"0123456789\", \"IT\", 3)\n",
    "module1 = ModuleOffering(1, \"tháng 3 2024\", \"Mr A\", \"phòng 1\", 30, \"not full\")\n",
    "module2 = ModuleOffering(2, \"tháng 4 2024\", \"Mr B\", \"phòng 2\", 25, \"full\")\n",
    "nv = Nhanvien(\"Mr Hi\", 1068, \"quản lý\")\n",
    "\n",
    "# đăng ký module\n",
    "sv.dang_ky_module(module1)\n",
    "sv.dang_ky_module(module2)\n",
    "\n",
    "# thay đổi trạng thái module\n",
    "nv.thay_doi_status(module2, \"not full\")\n",
    "\n",
    "# hủy đăng ký module\n",
    "sv.huy_dang_ky_module(module1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}